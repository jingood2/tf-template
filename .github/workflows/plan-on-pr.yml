name: Plan / Test On PR

on:
  pull_request:
    branches:
      - main

jobs:
  terraform-scan:
    name: terraform-scan 
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true
          terraform_version: 1.0.9
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Post Format
        if: always() && github.ref != 'refs/heads/main' && (steps.fmt.outcome == 'success' || steps.fmt.outcome == 'failure')
        uses: robburger/terraform-pr-commenter@v1
        with:
          commenter_type: fmt
          commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
          commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

      - name: Scan IaC - tfsec
        #if: ${{ inputs.ENABLE_TFSEC == 'true' }}
        uses: aquasecurity/tfsec-sarif-action@v0.1.3
        with:
          sarif_file: tfsec.sarif

      - name: Upload SARIF file
        #if: ${{ inputs.ENABLE_TFSEC == 'true' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: tfsec.sarif
  terraform-plan:
    name: terraform-plan
    needs: terraform-scan 
    env:
      TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      EXPAND_SUMMARY_DETAILS: true
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path:
          - dev
          - stage
          - prod

    permissions: write-all

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: true
        terraform_version: 1.0.9

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-region: us-east-1
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Init 
      id: init
      run: terraform init -input=false -backend-config="key=${{matrix.path}}"
    
    - name: Post Init
      if: always() && github.ref != 'refs/heads/main' && (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
      uses: robburger/terraform-pr-commenter@v1
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init.outputs.exitcode }}

    - name: Terraform Plan
      id: plan
      run: terraform plan --var-file=environments/${{matrix.path}}.auto.tfvars --out=plan.tfplan
      continue-on-error: true
    
    - name: Post Plan
      uses: robburger/terraform-pr-commenter@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        EXPAND_SUMMARY_DETAILS: 'true' # Override global environment variable; expand details just for this step
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.plan.outputs.stdout, steps.plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Compress TF Plan artifact
      run: |
        mkdir -p ${{ matrix.path }}
        zip -r ${{ matrix.path }}/tfplan.zip ./*

    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.path }}
        #path: '${{ matrix.path }}.zip'
        path: '${{ matrix.path}}/tfplan.zip'
        retention-days: 5
    
  apply-dev-plan:
    name: terraform-scan 
    needs: terraform-plan
    runs-on: ubuntu-latest
    #uses: jingood2/tf-template/.github/workflows/apply-tf-plan.yml@main
    #with:
    #  path: tfplan
    #  gh_environment: dev
  
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: dev
        #path: ${{ inputs.path }}

    - name: Decompress TF Plan artifact
      run: unzip ${{ env.TF_KEY}}/tfplan.zip
